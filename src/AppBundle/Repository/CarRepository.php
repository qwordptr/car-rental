<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Car;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\OptimisticLockException;
use Doctrine\ORM\ORMException;

/**
 * CarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CarRepository extends \Doctrine\ORM\EntityRepository
{
    private $em;

    public function __construct(EntityManager $em, Mapping\ClassMetadata $class)
    {
        $this->em = $em;

        parent::__construct($em, $class);
    }

    public function add(Car $car)
    {
        try {
            $this->em->persist($car);
            $this->em->flush();
        } catch (OptimisticLockException $e) {
        } catch (ORMException $e) {
        }
    }

    public function update(Car $car)
    {
        try {
            $this->em->flush();
        } catch (OptimisticLockException $e) {
        } catch (ORMException $e) {
        }
    }

    /**
     * @return mixed
     */
    public function getAvailableCars()
    {
        try {
        $q2 = $this->createQueryBuilder('cc')
            ->leftJoin('cc.notices', 'nn')
            ->where('nn.isActive = true')
            ->getQuery()
            ->getDQL();

        $q1 = $this->createQueryBuilder('c');
        $q1->leftJoin('c.notices', 'n')
            ->where($q1->expr()->notIn('c.id', $q2));

        return $q1->getQuery()->getResult();

        }catch (\Exception $exception) {
        }
    }

    public function remove($car)
    {
        $em = $this->em;

        try {
            $em->remove($car);
            $em->flush();
        } catch (ORMException $e) {

        }
    }
}
